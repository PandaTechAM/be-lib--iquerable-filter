@page "/companies"
@using TestFilters.db
@using PandaTech.IEnumerableFilters.Dto
@rendermode InteractiveServer
@inject IHttpClientFactory ClientFactory

<PageTitle>Counter</PageTitle>

@_filterDtosString

<h1>Companies</h1>

<button @onclick="Generate">Generate 1000</button>
<button @onclick="Refresh">Refresh</button>

<table>
    <thead>
    <tr>
        <th @onclick="() => SetOrder(Colls.Id)"> Id</th>
        <th @onclick="() => SetOrder(Colls.Age)"> Age</th>
        <th @onclick="() => SetOrder(Colls.Name)">Name</th>
        <th @onclick="() => SetOrder(Colls.Type)">Type</th>
        <th @onclick="() => SetOrder(Colls.Types)">Types</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var r in _data)
    {
        <tr>

            <td>@r.Id</td>
            <td>@r.Age</td>
            <td>@r.Name</td>
            <td>@r.Type</td>
            <td>@string.Join(';', r.Types.Select(x => x.ToString())) </td>
        </tr>
    }

    </tbody>
</table>

<select @onchange="e => SetPage(int.Parse(e.Value!.ToString()!))">
    @for (int i = 1; i <= 10; i++)
    {
        <option value="@i">@i</option>
    }
</select>

<select @onchange="e => SetPageSize(int.Parse(e.Value!.ToString()!))">
    <option value="10">10</option>
    <option value="20">20</option>
    <option value="50">50</option>
    <option value="100">100</option>
</select>

@foreach (Colls coll in Enum.GetValues(typeof(Colls)))
{
    <h3>@coll</h3>
    <input style="width: 80%"
           value="@_filters[coll]" type="text" @onchange="e => SetSearchText(coll, e.Value!.ToString()!)"/>
    <div style="display:flex; flex-direction: row;">
        @foreach (var val in _distinctColumnValuesResult[coll].Values)
        {
            <div @onclick="_ => AddFilter(coll, val)">@val - </div>
        }
    </div>
}


@code {

    enum Colls
    {
        Id,
        Name,
        Type,
        Types,
        Age
    }

    readonly Dictionary<Colls, string> _filters = new()
    {
        { Colls.Id, "" },
        { Colls.Name, "" },
        { Colls.Type, "" },
        { Colls.Types, "" },
        { Colls.Age, "" }
    };

    private int _selectedPage = 1;
    private int _selectedPageSize = 10;
    private List<Company> _data = [];
    private bool _descending;
    private string _orderColumn = "Id";

    private GetDataRequest _filterDtos = new();
    private string? _filterDtosString;

    readonly Dictionary<Colls, DistinctColumnValuesResult> _distinctColumnValuesResult =
        new()
        {
            { Colls.Id, new DistinctColumnValuesResult() },
            { Colls.Name, new DistinctColumnValuesResult() },
            { Colls.Type, new DistinctColumnValuesResult() },
            { Colls.Types, new DistinctColumnValuesResult() },
            { Colls.Age, new DistinctColumnValuesResult() }
        };


    protected override async Task OnInitializedAsync()
    {
        await Refresh();
        await base.OnInitializedAsync();
    }

    private async Task AddFilter(Colls coll, object text)
    {
        var list = _filters[coll].Split(';', StringSplitOptions.RemoveEmptyEntries).ToList();
        list.Add(text.ToString()!);

        await SetSearchText(coll, string.Join(';', list.Distinct()));
    }

    private async Task SetPage(int page)
    {
        _selectedPage = page;
        await Refresh();
    }

    private async Task SetOrder(Colls column)
    {
        _descending = !_descending;
        _orderColumn = column.ToString();
        await Refresh();
    }

    private async Task SetSearchText(Colls coll, string text)
    {
        _filters[coll] = text;

        _filterDtos = new GetDataRequest();

        foreach (var filter in _filters)
        {
            if (string.IsNullOrEmpty(filter.Value))
            {
                continue;
            }

            List<object> vals;
            var numCols = new[] { Colls.Id, Colls.Age };
            if (numCols.Contains(filter.Key))
            {
                vals = filter.Value.Split(";").Select(int.Parse).Select(x => x as object).ToList();
            }
            else
            {
                vals = filter.Value.Split(";").Select(x => x as object).ToList();
            }


            if (vals.Any())
            {
                _filterDtos.Filters.Add(new FilterDto
                {
                    Values = vals,
                    PropertyName = filter.Key.ToString(),
                    ComparisonType =
                        filter.Key == Colls.Types
                            ? vals.Count > 1
                                ? ComparisonType.In
                                : ComparisonType.Contains
                            : vals.Count > 1
                                ? ComparisonType.In
                                : ComparisonType.Equal
                });
            }
        }

        _filterDtosString = _filterDtos.ToString();
        await Refresh();
    }

    private async Task SetPageSize(int pageSize)
    {
        _selectedPageSize = pageSize;
        await Refresh();
    }

    private async Task SetColumnSearch(Colls text)
    {
        var client = ClientFactory.CreateClient();
        var request = new HttpRequestMessage(HttpMethod.Get,
            $"http://127.0.0.1/api/companies/distinct/{text}?page={_selectedPage}&pageSize={_selectedPageSize}&filterString={_filterDtosString}");

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            _distinctColumnValuesResult[text] = await response.Content.ReadFromJsonAsync<DistinctColumnValuesResult>() ?? new DistinctColumnValuesResult();
        }
    }

    private async Task Refresh()
    {
        var client = ClientFactory.CreateClient();

        _filterDtos.Order = new Ordering
        {
            PropertyName = _orderColumn,
            Descending = _descending
        };

        _filterDtosString = _filterDtos.ToString();

        var request = new HttpRequestMessage(HttpMethod.Get,
            $"http://127.0.0.1/api/companies?page={_selectedPage}&pageSize={_selectedPageSize}&q={_filterDtosString}");

        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            _data = await response.Content.ReadFromJsonAsync<List<Company>>() ?? new List<Company>();
        }
        else
        {
            _data = [];
        }

        foreach (var coll in Enum.GetValues(typeof(Colls)).Cast<Colls>())
        {
            await SetColumnSearch(coll);
        }
    }

    private async Task Generate()
    {
        var client = ClientFactory.CreateClient();

        var request = new HttpRequestMessage(HttpMethod.Post,
            $"http://127.0.0.1/api/generate/{10000}");

        await client.SendAsync(request);
    }

}