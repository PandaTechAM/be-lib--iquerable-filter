@page "/companies"
@using TestFilters.db
@using PandaTech.IEnumerableFilters.Dto
@using PandaTech.IEnumerableFilters.Enums
@using Pandatech.Crypto
@rendermode InteractiveServer
@inject IHttpClientFactory ClientFactory
@inject Aes256 Aes256


<PageTitle>Counter</PageTitle>

@_filterDtosString

<h1>Companies</h1>

<button @onclick="Generate">Generate 1000</button>
<button @onclick="Refresh">Refresh</button>

<table class="my-table">
    <thead>
    <tr>
        @foreach(var coll in Enum.GetValues(typeof(Colls)).Cast<Colls>())
        {
            <th @onclick="() => SetOrder(coll)"> @coll.ToString()</th>
        }
        </tr>
    </thead>
    <tbody>
    @foreach (var r in _data)
    {
        <tr>
        @foreach(var coll in Enum.GetValues(typeof(Colls)).Cast<Colls>())
        {
            switch (coll)
            {
                case Colls.Types:
                    <td>@string.Join(';', r.Types.Select(x => x.ToString())) </td>
                    break;
                case Colls.NameEncrypted:
                    <td>@Aes256.Decrypt(r.NameEncrypted)</td>
                    break;
                case Colls.SomeClass:
                    <td>@r.SomeClass?.Name</td>
                    break;
                case Colls.SomeClassN:
                    <td>@r.SomeClass?.NullableString</td>
                    break;
                case Colls.SomeClassNN:
                    <td>@Aes256.Decrypt(r.SomeClass?.NameEncrypted)</td>
                    break;
                case Colls.SomeClassList:
                    <td>@string.Join(';', r.SomeClassList.Select(x => x.Name)) </td>
                    break;
                default:
                {
                    var prop = r.GetType().GetProperty(coll.ToString());
                    var val = prop?.GetValue(r);
                    <td>@val</td>
                    break;
                }
            }
        }
        </tr>
    }

    </tbody>
</table>

<select @onchange="e => SetPage(int.Parse(e.Value!.ToString()!))">
    @for (int i = 1; i <= 10; i++)
    {
        <option value="@i">@i</option>
    }
</select>

<select @onchange="e => SetPageSize(int.Parse(e.Value!.ToString()!))">
    <option value="10">10</option>
    <option value="20">20</option>
    <option value="50">50</option>
    <option value="100">100</option>
</select>

@foreach (Colls coll in Enum.GetValues(typeof(Colls)))
{
    <h3>@coll</h3>
    <input style="width: 80%"
           value="@_filters[coll]" type="text" @onchange="e => SetSearchText(coll, e.Value!.ToString()!)"/>
    <div style="display:flex; flex-direction: row;">
        @foreach (var val in _distinctColumnValuesResult[coll].Values)
        {
            <div class="filterValue" @onclick="_ => AddFilter(coll, val)">@val</div>
        }
    </div>
}

<style>
    .filterValue {
        margin: 1px;
        padding: 1px;
        border: 1px solid black;
        border-radius: 5px;
        min-width: 10px;
    }
    
    .my-table {
        border-collapse: collapse;
        border: 1px solid black;
    }
    
    .my-table th {
        border: 1px solid black;
        padding: 5px;
        cursor: pointer;
    }
    
    .my-table td {
        border: 1px solid black;
        padding: 5px;
       }
        
        
</style>

@code {

    enum Colls
    {
        SomeClassList,
        Id,
        Name,
        NameEncrypted,
        Type,
        Types,
        Age,
        IsEnabled,
        InfoName,
        NullableString,
        SomeClass,
        SomeClassN,
        SomeClassNN,
    }

    private static List<Colls> _enumValues = Enum.GetValues(typeof(Colls)).Cast<Colls>().ToList();

    readonly Dictionary<Colls, string> _filters = _enumValues.ToDictionary(x => x, _ => "");

    private int _selectedPage = 1;
    private int _selectedPageSize = 10;
    private List<Company> _data = [];
    private bool _descending;
    private string _orderColumn = "";

    private GetDataRequest _filterDtos = new();
    private string? _filterDtosString;

    readonly Dictionary<Colls, DistinctColumnValuesResult> _distinctColumnValuesResult =
        _enumValues.ToDictionary(x => x, _ => new DistinctColumnValuesResult());


    protected override async Task OnInitializedAsync()
    {
        await Refresh();
        await base.OnInitializedAsync();
    }

    private async Task AddFilter(Colls coll, object? text)
    {
        var list = _filters[coll].Split(';', StringSplitOptions.RemoveEmptyEntries).ToList();
        list.Add(text?.ToString() ?? "null");

        await SetSearchText(coll, string.Join(';', list.Distinct()));
    }

    private async Task SetPage(int page)
    {
        _selectedPage = page;
        await Refresh();
    }

    private async Task SetOrder(Colls column)
    {
        _descending = !_descending;
        _orderColumn = column.ToString();
        await Refresh();
    }

    private async Task SetSearchText(Colls coll, string text)
    {
        _filters[coll] = text;

        _filterDtos = new GetDataRequest();

        foreach (var filter in _filters)
        {
            if (string.IsNullOrEmpty(filter.Value))
            {
                continue;
            }

            List<object?> values = filter.Key switch
            {
                Colls.Id => filter.Value.Split(";").Select(int.Parse).Select(x => x as object).ToList(),
                Colls.Name => filter.Value.Split(";").Select(x => x as object).ToList(),
                Colls.Type => filter.Value.Split(";").Select(x => x as object).ToList(),
                Colls.Types => filter.Value.Split(";").Select(x => x as object).ToList(),
                Colls.Age => filter.Value.Split(";").Select(int.Parse).Select(x => x as object).ToList(),
                Colls.IsEnabled => filter.Value.Split(";").Select(bool.Parse).Select(x => x as object).ToList(),
                Colls.NameEncrypted => filter.Value.Split(";").Select(x => x as object).Take(1).ToList(),
                Colls.InfoName => filter.Value.Split(";").Select(x => x as object).ToList(),
                Colls.NullableString => filter.Value.Split(";").Select(x => x == "null" ? null : (x as object)).ToList(),
                _ => filter.Value.Split(";").Select(x => x == "null" ? null : (x as object)).ToList(),
            };

            if (values.Any())
            {
                _filterDtos.Filters.Add(new FilterDto
                {
                    Values = values,
                    PropertyName = filter.Key.ToString(),
                    ComparisonType =
                        filter.Key switch
                        {
                            Colls.SomeClassList => ComparisonType.Contains,
                            Colls.Name => values.Count > 1
                                ? ComparisonType.In
                                : ComparisonType.Contains,
                            Colls.Types => values.Count > 1
                                ? ComparisonType.In
                                : ComparisonType.Contains,
                            Colls.InfoName => values.Count > 1
                                ? ComparisonType.In
                                : ComparisonType.Contains,
                            _ => values.Count > 1
                                ? ComparisonType.In
                                : ComparisonType.Equal
                        }
                });
            }
        }

        _filterDtosString = _filterDtos.ToString();
        await Refresh();
    }

    private async Task SetPageSize(int pageSize)
    {
        _selectedPageSize = pageSize;
        await Refresh();
    }

    private async Task SetColumnSearch(Colls text)
    {
        var client = ClientFactory.CreateClient();
        var request = new HttpRequestMessage(HttpMethod.Get,
            $"http://127.0.0.1/api/companies/distinct/{text}?page={_selectedPage}&pageSize={_selectedPageSize}&filterString={_filterDtosString}");

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            _distinctColumnValuesResult[text] = await response.Content.ReadFromJsonAsync<DistinctColumnValuesResult>() ?? new DistinctColumnValuesResult();
        }
    }

    private async Task Refresh()
    {
        var client = ClientFactory.CreateClient();

        _filterDtos.Order = new Ordering
        {
            PropertyName = _orderColumn,
            Descending = _descending
        };

        _filterDtosString = _filterDtos.ToString();

        var request = new HttpRequestMessage(HttpMethod.Get,
            $"http://127.0.0.1/api/companies?page={_selectedPage}&pageSize={_selectedPageSize}&q={_filterDtosString}");

        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            _data = await response.Content.ReadFromJsonAsync<List<Company>>() ?? new List<Company>();
        }
        else
        {
            _data = [];
        }

        foreach (var coll in Enum.GetValues(typeof(Colls)).Cast<Colls>())
        {
            await SetColumnSearch(coll);
        }
    }

    private async Task Generate()
    {
        var client = ClientFactory.CreateClient();

        var request = new HttpRequestMessage(HttpMethod.Post,
            $"http://127.0.0.1/api/generate/{10000}");

        await client.SendAsync(request);
    }

}