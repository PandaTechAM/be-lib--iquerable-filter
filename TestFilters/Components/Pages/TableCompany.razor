@page "/companies"
@using TestFilters.db
@using PandaTech.IEnumerableFilters.Dto
@rendermode InteractiveServer
@inject IHttpClientFactory ClientFactory

<PageTitle>Counter</PageTitle>

<h1>Companies</h1>

<button @onclick="Generate">Generate 1000</button>t
<button @onclick="Refresh">Refresh</button>

<table>
    <thead>
    <tr>
        <th @onclick="() => SetOrder(Colls.Id)" > Id</th>
        <th @onclick="() => SetOrder(Colls.Name)" >Name</th>
        <th @onclick="() => SetOrder(Colls.Type)">Type</th>
        <th @onclick="() => SetOrder(Colls.Types)">Types</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var r in _data)
    {
        <tr>

            <td>@r.Id</td>
            <td>@r.Name</td>
            <td>@r.Type</td>
            <td>@string.Join(';', r.Types.Select(x => x.ToString())) </td>
        </tr>
    }

    </tbody>

    <select @onchange="(e => SetPage(int.Parse(e.Value.ToString())))">
        @for (int i = 1; i <= 10; i++)
        {
            <option value="@i">@i</option>
        }
    </select>

    <select @onchange="(e => SetPageSize(int.Parse(e.Value.ToString())))">
        <option value="10">10</option>
        <option value="20">20</option>
        <option value="50">50</option>
        <option value="100">100</option>
    </select>
    <h3>Id</h3>
    <input type="text" @onchange="(e => SetSearchText(e.Value.ToString()))"/>
    <br>
    @_filterDtosString
    <br>
    <input type="text" @onchange="e => SetColumnSearch(e.Value.ToString())"/>
    @_distinctColumnValuesResult
</table>



@code {
    enum Colls { Id, Name, Type, Types }
    
    private string _searchText = "";
    private int _selectedPage = 1;
    private int _selectedPageSize = 10;
    private List<Company> _data = new();
    private bool _descending = false;
    private string _orderColumn = "Id";

    private GetDataRequest _filterDtos = new();
    private string? _filterDtosString;

    DistinctColumnValuesResult _distinctColumnValuesResult = new();
    
    protected override async Task OnInitializedAsync()
    {
        await Refresh();
        await base.OnInitializedAsync();
    }

    private async Task SetPage(int page)
    {
        _selectedPage = page;
        await Refresh();
    }
    
    private async Task SetOrder(Colls column)
    {
        _descending = !_descending;
        _orderColumn = column.ToString();
        await Refresh();
    }

    private async Task SetSearchText(string text)
    {
        _searchText = text;

        var vals = _searchText.Split(";").Select(x => x as object).ToList();

        _filterDtos = new GetDataRequest();
        if (vals.Any())
        {
            _filterDtos.Filters.Add(new FilterDto
            {
                Values = vals,
                PropertyName = "Types",
                ComparisonType = ComparisonType.In
            });
        }

        _filterDtosString = _filterDtos.ToString();
        await Refresh();
    }

    private async Task SetPageSize(int pageSize)
    {
        _selectedPageSize = pageSize;
        await Refresh();
    }

    private async Task SetColumnSearch(string text)
    {
        var client = ClientFactory.CreateClient();
        var request = new HttpRequestMessage(HttpMethod.Get,
            $"http://127.0.0.1/api/companies/distinct/{text}?page={_selectedPage}&pageSize={_selectedPageSize}&filterString={_filterDtosString}");
        
        var response = await client.SendAsync(request);
        
        if (response.IsSuccessStatusCode)
        {
            _distinctColumnValuesResult = await response.Content.ReadFromJsonAsync<DistinctColumnValuesResult>() ?? new DistinctColumnValuesResult();
        }
    }
    
    private async Task Refresh()
    {
        var client = ClientFactory.CreateClient();
        
        _filterDtos.Order = new Ordering
        {
            PropertyName = _orderColumn,
            Descending = _descending
        };
        
        _filterDtosString = _filterDtos.ToString();
        
        var request = new HttpRequestMessage(HttpMethod.Get,
            $"http://127.0.0.1/api/companies?page={_selectedPage}&pageSize={_selectedPageSize}&q={_filterDtosString}");

        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            _data = await response.Content.ReadFromJsonAsync<List<Company>>() ?? new List<Company>();
        }
        else
        {
            _data = [];
        }
    }

    private async Task Generate()
    {
        var client = ClientFactory.CreateClient();

        var request = new HttpRequestMessage(HttpMethod.Post,
            $"http://127.0.0.1/api/generate/{10000}");

        await client.SendAsync(request);
    }

}